{"version":3,"sources":["components/NavBar.jsx","components/Layout.jsx","components/SkillCompareTable.jsx","components/PerkCompareTable.jsx","components/LanguageCompareTable.jsx","components/GuildPicker.jsx","components/GuildCompare.jsx","components/SkillPicker.jsx","theme.js","App.jsx","serviceWorker.js","index.js"],"names":["useState","React","withRouter","withStyles","theme","appBar","appTitle","paddingRight","breakpoints","down","fontSize","link","textDecoration","color","opacity","fontWeight","margin","padding","sideNavLink","horizontalNavLinks","display","menuButton","width","up","activeLink","appBarContainer","flexDirection","classes","drawerOpen","setDrawerOpen","navLinks","to","label","HorizonalNavLinks","map","className","activeClassName","exact","SideNavLinks","key","open","onClose","position","hidden-lg","aria-label","edge","onClick","variant","layout","backgroundColor","palette","background","default","overflow","contentWrapper","maxWidth","children","container","item","xs","SkillCompareTable","skillKey","console","log","Object","keys","data","skills","group","foundSkill","find","k","extended","sk","guildGroup","gSelected","branchesFromSk","branching","this","findGroupAndLabel","proficiency","result","gNumber","proficiencyKey","forEach","findBranchesFrom","props","g1Key","g2Key","g1Value","g2Value","proficiencies","i","skillsToObj","g1Label","g2Label","mungedSkills","mungeSkills","square","root","table","cell","skillGroups","skillGroup","titleCell","values","row","id","style","disableFocusListener","disableTouchListener","title","chip","Component","textTransform","marginLeft","height","marginTop","paddingLeft","content","PerkCompareTable","perks","prk","perksToObj","mungedPerks","mungePerks","length","noContent","component","scope","textAlign","LanguageCompareTable","languages","lng","languagesToObj","mungedLanguages","mungeLanguages","GuildPicker","state","guild","subguild","toggleSelection","event","setState","target","name","value","newQuery","queryString","stringify","history","location","pathname","push","search","parse","guilds","subguilds","tableConfig","justify","spacing","sm","formControl","onChange","inputProps","sortedguilds","gKey","karma","href","documentation","select","sortedsubguilds","lg","flexGrow","marginRight","primary","main","GuildCompare","guild1","guild2","SkillPicker","selectedSkills","flattenGuild","skillPrefix","profLevel","skill","itemIndex","indexOf","splice","clearSelection","findGuildsForSkills","skillsMatched","includes","karmaLabel","linkTo","sectionTitle","selectedCount","size","clearSelected","skillGroupTitle","chipContainer","guildCombination","guildOption","guildOptionLink","guildOptionText","float","createMuiTheme","themeOverrides","App","path","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.57a7cb44.chunk.js","sourcesContent":["import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { withRouter } from \"react-router\";\r\n\r\nconst { useState } = React;\r\n\r\nconst styles = (theme) => ({\r\n  appBar: {\r\n    ...theme.appBar\r\n  },\r\n  appTitle: {\r\n    paddingRight: 32,\r\n    [theme.breakpoints.down('xs')]: {\r\n      fontSize: 12,\r\n      paddingRight: 12,\r\n    }\r\n  },\r\n  link: {\r\n    textDecoration: 'none',\r\n    color: 'inherit',\r\n    opacity: 0.69,\r\n    '&>button': {\r\n      fontWeight: 600,\r\n      margin: '0 4px',\r\n      padding: '4px',\r\n    },\r\n  },\r\n  sideNavLink: {\r\n    textDecoration: 'none',\r\n    '&>button > span': {\r\n      color: 'white',\r\n      [theme.breakpoints.down('sm')]: {\r\n        fontSize: 10,\r\n      }\r\n    },\r\n  },\r\n  horizontalNavLinks: {\r\n    [theme.breakpoints.down('sm')]: {\r\n      display: 'none',\r\n    }\r\n  },\r\n  menuButton: {\r\n    width: 64,\r\n    [theme.breakpoints.up('md')]: {\r\n      display: 'none',\r\n    }\r\n  },\r\n  activeLink: {\r\n    opacity: 1,\r\n  },\r\n  appBarContainer: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n  },\r\n});\r\n\r\nconst NavBar = ({\r\n  classes,\r\n}) => {\r\n  const [drawerOpen, setDrawerOpen] = useState(false);\r\n  const navLinks = [\r\n    {\r\n      to: '/arma-guild-picker/',\r\n      label: 'Guild Picker'\r\n    },\r\n    {\r\n      to: '/arma-guild-picker/guild-compare/',\r\n      label: 'Guild Compare'\r\n    },\r\n    {\r\n      to: '/arma-guild-picker/skill-picker/',\r\n      label: 'Skill Picker'\r\n    },\r\n  ];\r\n\r\n  const HorizonalNavLinks = navLinks.map(({to, label}) => (\r\n    <NavLink to={to} className={classes.link} activeClassName={classes.activeLink} exact>\r\n      <Button color=\"inherit\">\r\n        {label}\r\n      </Button>\r\n    </NavLink>\r\n  ));\r\n\r\n  const SideNavLinks = navLinks.map(({to, label}) => (\r\n    <ListItem key={to}>\r\n      <NavLink to={to} className={classes.sideNavLink} activeClassName={classes.activeLink} exact>\r\n        <Button color=\"inherit\">\r\n          {label}\r\n        </Button>\r\n      </NavLink>\r\n    </ListItem>\r\n  ));\r\n\r\n  return(\r\n    <>\r\n      <Drawer open={drawerOpen} onClose={() => setDrawerOpen(false)}>\r\n        <List>\r\n          {SideNavLinks}\r\n        </List>\r\n      </Drawer>\r\n      <AppBar position=\"static\">\r\n        <div className={classes.appBarContainer}>\r\n          <IconButton\r\n            className={classes.menuButton}\r\n            hidden-lg={true}\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            edge=\"end\"\r\n            onClick={() => setDrawerOpen(!drawerOpen)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Toolbar className={classes.appBar}>\r\n            <Typography className={classes.appTitle} variant=\"title\" color=\"inherit\">\r\n              Armageddon MUD Skills & Guilds\r\n            </Typography>\r\n            <div className={classes.horizontalNavLinks}>\r\n              {HorizonalNavLinks}\r\n            </div>\r\n          </Toolbar>\r\n        </div>\r\n      </AppBar>\r\n    </>\r\n  )\r\n}\r\nexport default withRouter(withStyles(styles)(NavBar));\r\n","import React from 'react'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport NavBar from './NavBar'\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst styles = (theme) => ({\r\n  layout: {\r\n    backgroundColor: theme.palette.background.default,\r\n    overflow: 'hidden'\r\n  },\r\n  contentWrapper: {\r\n    [theme.breakpoints.down('lg')]: {\r\n      maxWidth: 1100,\r\n      margin: '0 auto'\r\n    }\r\n  }\r\n});\r\nconst Layout = ({\r\n  theme,\r\n  children,\r\n  classes,\r\n}) => {\r\n  return(\r\n    <Grid container className={classes.layout}>\r\n      <Grid item xs={12}>\r\n        <NavBar />\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <div className={classes.contentWrapper}>\r\n          {children}\r\n        </div>\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\nexport default withStyles(styles)(Layout);\r\n","import React, { Component }from 'react'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport data from '../data/data.json'\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nconst styles = (theme) => ({\r\n  cell: {\r\n    width: '25%',\r\n    [theme.breakpoints.down('xs')]: {\r\n      padding: 4,\r\n      fontSize: '0.65rem',\r\n      maxWidth: 65,\r\n      paddingRight: '4px !important'\r\n    },\r\n    padding: 8,\r\n  },\r\n  titleCell: {\r\n    textTransform: 'capitalize',\r\n    padding: 8,\r\n    backgroundColor: '#aaaaaa21',\r\n    [theme.breakpoints.down('xs')]: {\r\n      padding: 4,\r\n      fontSize: '0.65rem',\r\n      maxWidth: 65,\r\n      paddingRight: '4px !important'\r\n    },\r\n  },\r\n  chip: {\r\n    backgroundColor: 'rgb(48, 48, 48)',\r\n    fontSize: 8,\r\n    marginLeft: 8,\r\n    padding: 2,\r\n    height: 16,\r\n    marginTop: -1,\r\n    [theme.breakpoints.down('xs')]: {\r\n      marginLeft: 3,\r\n      fontSize: 7,\r\n      height: 13,\r\n    },\r\n    '&> span': {\r\n      paddingLeft: 4,\r\n      paddingRight: 4,\r\n      [theme.breakpoints.down('xs')]: {\r\n        paddingLeft: 2,\r\n        paddingRight: 2\r\n      }\r\n    },\r\n    '&> span::after': {\r\n      content: '\"BRANCH\"',\r\n      [theme.breakpoints.down('xs')]: {\r\n          content: '\"B\"',\r\n      }\r\n    }\r\n  }\r\n});\r\nclass SkillCompareTable extends Component {\r\n\r\n  findGroupAndLabel(skillKey) {\r\n    console.log(skillKey)\r\n    for (let group of Object.keys(data.skills)) {\r\n      const foundSkill = Object.keys(data.skills[group]).find((k) => k === skillKey)\r\n      if (foundSkill) {\r\n        return {\r\n          group,\r\n          label: data.skills[group][foundSkill].label,\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  findBranchesFrom({extended, sk, guildGroup, gSelected }) {\r\n    if (!extended) return;\r\n    const branchesFromSk = data[guildGroup][gSelected].branching[sk];\r\n    const {\r\n      group,\r\n      label,\r\n    } = this.findGroupAndLabel(branchesFromSk);\r\n    return data.skills[group][branchesFromSk].label\r\n  }\r\n\r\n  skillsToObj({\r\n    guildGroup,\r\n    gSelected,\r\n    proficiency,\r\n    result = {},\r\n    extended = false,\r\n    gNumber = 1,\r\n  }) {\r\n    const proficiencyKey = `${extended ? 'ex': ''}${proficiency}`;\r\n    if (data[guildGroup] && data[guildGroup][gSelected][proficiencyKey]) {\r\n      data[guildGroup][gSelected][proficiencyKey].forEach(sk => {\r\n        const {\r\n          group,\r\n          label,\r\n        } = this.findGroupAndLabel(sk);\r\n\r\n        result[group] = result[group] || {};\r\n        result[group][sk] = {\r\n          [`g${gNumber}Skill`]: label,\r\n          [`g${gNumber}SkillLevel`]: proficiency,\r\n          [`g${gNumber}SkillBranchesFrom`]: this.findBranchesFrom({ extended, sk, guildGroup, gSelected }),\r\n          group,\r\n          ...result[group][sk],\r\n        }\r\n      })\r\n    }\r\n    return result;\r\n  }\r\n\r\n  mungeSkills() {\r\n    const {\r\n      g1Key,\r\n      g2Key,\r\n      g1Value,\r\n      g2Value,\r\n    } = this.props;\r\n\r\n    let result = {};\r\n    for (let proficiency of data.proficiencies) {\r\n      for (var i = 0; i < 2; i++) {\r\n        const guildGroup = `${i === 0 ? g1Key : g2Key}s`\r\n        const gSelected = i === 0 ? g1Value : g2Value;\r\n        const gNumber = i + 1;\r\n        for (let extended of [true, false]) {\r\n          result = this.skillsToObj({result, guildGroup, gSelected, proficiency, extended, gNumber})\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      g1Label,\r\n      g2Label,\r\n      g1Key,\r\n      g2Key,\r\n      classes,\r\n    } = this.props;\r\n    const mungedSkills = this.mungeSkills();\r\n    return (\r\n      <Paper square className={classes.root}>\r\n        <Table className={classes.table}>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell className={classes.cell}>\r\n                {g1Label} Skills\r\n              </TableCell>\r\n              <TableCell className={classes.cell}/>\r\n              <TableCell className={classes.cell}>\r\n                {g2Label} Skills\r\n              </TableCell>\r\n              <TableCell className={classes.cell}/>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {data.skillGroups.map(skillGroup => (\r\n              <>\r\n                <TableRow key={skillGroup}>\r\n                  <TableCell className={classes.titleCell}>\r\n                    {skillGroup}\r\n                  </TableCell>\r\n                  <TableCell className={classes.titleCell} />\r\n                  <TableCell className={classes.titleCell} />\r\n                  <TableCell className={classes.titleCell} />\r\n                </TableRow>\r\n                {mungedSkills[skillGroup] && Object.values(mungedSkills[skillGroup]).map(row => (\r\n                  <TableRow key={row.id}>\r\n                    <TableCell\r\n                      className={classes.cell}\r\n                      style={{\r\n                        backgroundColor: row['g1SkillBranchesFrom'] ? 'rgba(255, 236, 179, 0.2)' : 'inherit'\r\n                      }}\r\n                    >\r\n                    {\r\n                      row['g1SkillBranchesFrom'] && row['g1Skill']\r\n                      ? (\r\n                        <Tooltip\r\n                          disableFocusListener disableTouchListener \r\n                          title={`branches from ${row['g1SkillBranchesFrom']}`}\r\n                          aria-label={`branches from ${row['g1SkillBranchesFrom']}`}\r\n                        >\r\n                          <div>\r\n                            {row['g1Skill']}\r\n                          </div>\r\n                        </Tooltip>\r\n                      ) : row['g1Skill']\r\n                    }\r\n                    </TableCell>\r\n                    <TableCell\r\n                      className={classes.cell}\r\n                      style={{\r\n                        backgroundColor: row['g1SkillBranchesFrom'] ? 'rgba(255, 236, 179, 0.2)' : 'inherit'\r\n                      }}\r\n                    >\r\n                    {\r\n                      row['g1SkillBranchesFrom']\r\n                      ? (\r\n                        <Tooltip\r\n                          disableFocusListener disableTouchListener \r\n                          title={`branches from ${row['g1SkillBranchesFrom']}`}\r\n                          aria-label={`branches from ${row['g1SkillBranchesFrom']}`}\r\n                        >\r\n                          <div>\r\n                            {row['g1SkillLevel']}\r\n                            {row['g1SkillBranchesFrom'] && <Chip className={classes.chip} />}\r\n                          </div>\r\n                        </Tooltip>\r\n                      ) : row['g1SkillLevel']\r\n                    }\r\n                    </TableCell>\r\n                    <TableCell\r\n                      className={classes.cell}\r\n                      style={{\r\n                        backgroundColor: row['g2SkillBranchesFrom'] ? 'rgba(255, 236, 179, 0.2)' : 'inherit'\r\n                      }}\r\n                    >\r\n                    {\r\n                      row['g2SkillBranchesFrom'] && row['g2Skill']\r\n                      ? (\r\n                        <Tooltip\r\n                          disableFocusListener disableTouchListener \r\n                          title={`branches from ${row['g2SkillBranchesFrom']}`}\r\n                          aria-label={`branches from ${row['g2SkillBranchesFrom']}`}\r\n                        >\r\n                          <div>\r\n                            {row['g2Skill']}\r\n                          </div>\r\n                        </Tooltip>\r\n                      ) : row['g2Skill']\r\n                    }\r\n                    </TableCell>\r\n                    <TableCell\r\n                      className={classes.cell}\r\n                      style={{\r\n                        backgroundColor: row['g2SkillBranchesFrom'] ? 'rgba(255, 236, 179, 0.2)' : 'inherit'\r\n                      }}\r\n                    >\r\n                    {\r\n                      row['g2SkillBranchesFrom']\r\n                      ? (\r\n                        <Tooltip\r\n                          disableFocusListener disableTouchListener \r\n                          title={`branches from ${row['g2SkillBranchesFrom']}`}\r\n                          aria-label={`branches from ${row['g2SkillBranchesFrom']}`}\r\n                        >\r\n                          <div>\r\n                            {row['g2SkillLevel']}\r\n                            {row['g2SkillBranchesFrom'] && <Chip className={classes.chip} />}\r\n                          </div>\r\n                        </Tooltip>\r\n                      ) : row['g2SkillLevel']\r\n                    }\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </Paper>\r\n    );\r\n  }\r\n}\r\nexport default withStyles(styles)(SkillCompareTable);\r\n\r\n","import React, { Component }from 'react'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport data from '../data/data.json'\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst styles = (theme) => ({\r\n  cell: {\r\n    width: '50%',\r\n    [theme.breakpoints.down('xs')]: {\r\n      padding: 4,\r\n      fontSize: '0.65rem',\r\n      maxWidth: 65,\r\n      paddingRight: '4px !important'\r\n    },\r\n    [theme.breakpoints.down('sm')]: {\r\n      padding: 8,\r\n    },\r\n  },\r\n  noContent: {\r\n    padding: '1rem',\r\n    textAlign: 'center',\r\n    width: '100%'\r\n  }\r\n});\r\nclass PerkCompareTable extends Component {\r\n  perksToObj({\r\n    guildGroup,\r\n    gSelected,\r\n    gNumber = 1,\r\n    result = {},\r\n  }) {\r\n    if (data[guildGroup] && data[guildGroup][gSelected].perks) {\r\n      data[guildGroup][gSelected].perks.forEach(prk => {\r\n        result[prk] = {\r\n          [`g${gNumber}Perk`]: data.perks[prk],\r\n          ...result[prk],\r\n        }\r\n      })\r\n    }\r\n    return result;\r\n  }\r\n\r\n  mungePerks() {\r\n    const {\r\n      g1Key,\r\n      g2Key,\r\n      g1Value,\r\n      g2Value,\r\n    } = this.props;\r\n\r\n    let result = {};\r\n    for (var i = 0; i < 2; i++) {\r\n      const guildGroup = `${i === 0 ? g1Key : g2Key}s`\r\n      const gSelected = i === 0 ? g1Value : g2Value;\r\n      const gNumber = i + 1;\r\n      result = this.perksToObj({result, guildGroup, gSelected, gNumber})\r\n    }\r\n    return Object.values(result);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      g1Label,\r\n      g2Label,\r\n      g1Key,\r\n      g2Key,\r\n      classes,\r\n    } = this.props;\r\n\r\n    const mungedPerks = this.mungePerks();\r\n    return (\r\n      <Paper square className={classes.root}>\r\n        <Table className={classes.table}>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell className={classes.cell}>\r\n                {g1Label} Perks\r\n              </TableCell>\r\n              <TableCell className={classes.cell}>\r\n                {g2Label} Perks\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {(!mungedPerks || mungedPerks.length === 0) && (\r\n              <TableRow key=\"noPerks\">\r\n                <Typography className={classes.noContent}>Neither group has perks</Typography>\r\n              </TableRow>\r\n            )}\r\n            {mungedPerks && mungedPerks.length > 0  && mungedPerks.map(row => (\r\n              <TableRow key={row.id}>\r\n                <TableCell className={classes.cell} component=\"th\" scope=\"row\">\r\n                  {row['g1Perk']}\r\n                </TableCell>\r\n                <TableCell className={classes.cell}>{row['g2Perk']}</TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </Paper>\r\n    );\r\n  }\r\n}\r\nexport default withStyles(styles)(PerkCompareTable);\r\n\r\n","import React, { Component }from 'react'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport data from '../data/data.json'\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst styles = (theme) => ({\r\n  cell: {\r\n    width: '50%',\r\n    [theme.breakpoints.down('xs')]: {\r\n      padding: 4,\r\n      fontSize: '0.65rem',\r\n      maxWidth: 65,\r\n      paddingRight: '4px !important'\r\n    },\r\n    [theme.breakpoints.down('sm')]: {\r\n      padding: 8,\r\n    },\r\n  },\r\n  noContent: {\r\n    padding: '1rem',\r\n    textAlign: 'center',\r\n    width: '100%'\r\n  }\r\n});\r\nclass LanguageCompareTable extends Component {\r\n  languagesToObj({\r\n    guildGroup,\r\n    gSelected,\r\n    gNumber = 1,\r\n    result = {},\r\n  }) {\r\n    if (data[guildGroup] && data[guildGroup][gSelected].languages) {\r\n      data[guildGroup][gSelected].languages.forEach(lng => {\r\n        result[lng] = {\r\n          [`g${gNumber}Language`]: data.skills.languages[lng].label,\r\n          ...result[lng],\r\n        }\r\n      })\r\n    }\r\n    return result;\r\n  }\r\n\r\n  mungeLanguages() {\r\n    const {\r\n      g1Key,\r\n      g2Key,\r\n      g1Value,\r\n      g2Value,\r\n    } = this.props;\r\n\r\n    let result = {};\r\n      for (var i = 0; i < 2; i++) {\r\n        const guildGroup = `${i === 0 ? g1Key : g2Key}s`\r\n        const gSelected = i === 0 ? g1Value : g2Value;\r\n        const gNumber = i + 1;\r\n        result = this.languagesToObj({result, guildGroup, gSelected, gNumber})\r\n    }\r\n    return Object.values(result);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      g1Label,\r\n      g2Label,\r\n      g1Key,\r\n      g2Key,\r\n      classes,\r\n    } = this.props;\r\n\r\n    const mungedLanguages = this.mungeLanguages();\r\n    return (\r\n      <Paper square className={classes.root}>\r\n        <Table className={classes.table}>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell className={classes.cell}>\r\n                {g1Label} Languages\r\n              </TableCell>\r\n              <TableCell className={classes.cell}>\r\n                {g2Label} Languages\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {(!mungedLanguages || mungedLanguages.length === 0) && (\r\n              <TableRow key=\"noLanguages\">\r\n                <Typography className={classes.noContent}>Neither group has bonus languages</Typography>\r\n              </TableRow>\r\n            )}\r\n            {mungedLanguages && mungedLanguages.length > 0  && mungedLanguages.map(row => (\r\n              <TableRow key={row.id}>\r\n                <TableCell className={classes.cell} component=\"th\" scope=\"row\">\r\n                  {row['g1Language']}\r\n                </TableCell>\r\n                <TableCell className={classes.cell}>{row['g2Language']}</TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </Paper>\r\n    );\r\n  }\r\n}\r\nexport default withStyles(styles)(LanguageCompareTable);\r\n\r\n","import React, { Component }from 'react'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport queryString from 'query-string';\r\nimport data from '../data/data.json'\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport SkillCompareTable from './SkillCompareTable';\r\nimport PerkCompareTable from './PerkCompareTable';\r\nimport LanguageCompareTable from './LanguageCompareTable';\r\n\r\nconst styles = (theme) => ({\r\n  container: {\r\n    flexGrow: 1,\r\n  },\r\n  formControl: {\r\n    width: 'calc(100% - 1rem)',\r\n    marginRight: '1rem',\r\n  },\r\n  link: {\r\n    color: theme.palette.primary.main,\r\n  },\r\n});\r\nclass GuildPicker extends Component {\r\n  state = {\r\n    guild: 'enforcer',\r\n    subguild: 'hunter',\r\n  }\r\n\r\n  componentDidMount() {\r\n    const {\r\n      location\r\n    } = this.props;\r\n    const {\r\n      guild,\r\n      subguild\r\n    } = queryString.parse(location.search);\r\n\r\n    if (data.guilds[guild]) {\r\n      this.setState({ guild });\r\n    }\r\n    if (data.subguilds[subguild]) {\r\n      this.setState({ subguild });\r\n    }\r\n  }\r\n\r\n  toggleSelection = event => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n    const {\r\n      guild,\r\n      subguild\r\n    } = this.state;\r\n    const newQuery = queryString.stringify({\r\n      ...{\r\n        guild,\r\n        subguild,\r\n      },\r\n      [event.target.name]: event.target.value,\r\n    });\r\n    const {\r\n      history,\r\n      location: {\r\n        pathname = '/'\r\n      } = {}\r\n    } = this.props;\r\n    history.push({\r\n      pathname,\r\n      search: newQuery,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      classes\r\n    } = this.props;\r\n    const {\r\n      guild,\r\n      subguild,\r\n    } = this.state;\r\n    const tableConfig = {\r\n      g1Label: \"Guild\",\r\n      g2Label: \"Subguild\",\r\n      g1Key: \"guild\",\r\n      g2Key: \"subguild\",\r\n      g1Value: guild,\r\n      g2Value: subguild,\r\n    };\r\n    return (\r\n      <>\r\n        <Grid container justify=\"center\" spacing={16} className={classes.container}>\r\n          <Grid item xs={12} sm={6}>\r\n            <FormHelperText>Guild</FormHelperText>\r\n            <FormControl className={classes.formControl}>\r\n              <Select\r\n                value={this.state.guild}\r\n                onChange={this.toggleSelection}\r\n                inputProps={{\r\n                  name: 'guild',\r\n                  id: 'guild-select',\r\n                }}\r\n              >\r\n                {data.sortedguilds.map(gKey => (\r\n                  <MenuItem value={gKey}>\r\n                    {data.guilds[gKey].label}\r\n                    {data.guilds[gKey].karma ? ` (${data.guilds[gKey].karma})` : ''}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n              <FormHelperText>\r\n                <span>Documentation: </span>\r\n                <a\r\n                  className={classes.link}\r\n                  href={data.guilds[this.state.guild].documentation}\r\n                  target=\"_blank\"\r\n                >\r\n                  {data.guilds[this.state.guild].documentation}\r\n                </a>\r\n              </FormHelperText>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <FormHelperText>Subguild</FormHelperText>\r\n            <FormControl className={classes.formControl}>\r\n              <Select\r\n                className={classes.select}\r\n                value={this.state.subguild}\r\n                onChange={this.toggleSelection}\r\n                inputProps={{\r\n                  name: 'subguild',\r\n                  id: 'subguild-select',\r\n                }}\r\n              >\r\n                {data.sortedsubguilds.map(gKey => (\r\n                  <MenuItem value={gKey}>\r\n                    {data.subguilds[gKey].label}\r\n                    {data.subguilds[gKey].karma ? ` (${data.subguilds[gKey].karma} karma)` : ''}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n              <FormHelperText>\r\n                <span>Documentation: </span>\r\n                <a\r\n                  className={classes.link}\r\n                  href={data.subguilds[this.state.subguild].documentation}\r\n                  target=\"_blank\"\r\n                >\r\n                  {data.subguilds[this.state.subguild].documentation}\r\n                </a>\r\n              </FormHelperText>\r\n            </FormControl>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container justify=\"center\" spacing={16} className={classes.container}>\r\n          <Grid item xs={12} lg={6}>\r\n            <SkillCompareTable\r\n              {...tableConfig}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} lg={6}>\r\n            <Grid container spacing={16} className={classes.container}>\r\n              <Grid item xs={12}>\r\n                <PerkCompareTable\r\n                  {...tableConfig}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <LanguageCompareTable\r\n                  {...tableConfig}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default withStyles(styles)(GuildPicker);\r\n","import React, { Component }from 'react'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport queryString from 'query-string';\r\nimport data from '../data/data.json'\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport SkillCompareTable from './SkillCompareTable';\r\nimport PerkCompareTable from './PerkCompareTable';\r\nimport LanguageCompareTable from './LanguageCompareTable';\r\n\r\nconst styles = (theme) => ({\r\n  container: {\r\n    flexGrow: 1,\r\n  },\r\n  formControl: {\r\n    width: 'calc(100% - 1rem)',\r\n    marginRight: '1rem',\r\n  },\r\n  link: {\r\n    color: theme.palette.primary.main,\r\n  },\r\n});\r\nclass GuildCompare extends Component {\r\n  state = {\r\n    guild1: 'enforcer',\r\n    guild2: 'infiltrator',\r\n  }\r\n\r\n  componentDidMount() {\r\n    const {\r\n      location\r\n    } = this.props;\r\n    const {\r\n      guild1,\r\n      guild2\r\n    } = queryString.parse(location.search);\r\n\r\n    if (data.guilds[guild1]) {\r\n      this.setState({ guild1 });\r\n    }\r\n    if (data.guilds[guild2]) {\r\n      this.setState({ guild2 });\r\n    }\r\n  }\r\n\r\n  toggleSelection = event => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n    const {\r\n      guild1,\r\n      guild2\r\n    } = this.state;\r\n    const newQuery = queryString.stringify({\r\n      ...{\r\n        guild1,\r\n        guild2,\r\n      },\r\n      [event.target.name]: event.target.value,\r\n    });\r\n    const {\r\n      history,\r\n      location: {\r\n        pathname = '/'\r\n      } = {}\r\n    } = this.props;\r\n    history.push({\r\n      pathname,\r\n      search: newQuery,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      classes\r\n    } = this.props;\r\n    const {\r\n      guild1,\r\n      guild2,\r\n    } = this.state;\r\n    const tableConfig = {\r\n      g1Label: \"Guild 1\",\r\n      g2Label: \"Guild 2\",\r\n      g1Key: \"guild\",\r\n      g2Key: \"guild\",\r\n      g1Value: guild1,\r\n      g2Value: guild2,\r\n    };\r\n    return (\r\n      <>\r\n        <Grid container justify=\"center\" spacing={16} className={classes.container}>\r\n          <Grid item xs={12} sm={6}>\r\n            <FormHelperText>Guild 1</FormHelperText>\r\n            <FormControl className={classes.formControl}>\r\n              <Select\r\n                value={this.state.guild1}\r\n                onChange={this.toggleSelection}\r\n                inputProps={{\r\n                  name: 'guild1',\r\n                  id: 'guild1-select',\r\n                }}\r\n              >\r\n                {data.sortedguilds.map(gKey => (\r\n                  <MenuItem value={gKey}>\r\n                    {data.guilds[gKey].label}\r\n                    {data.guilds[gKey].karma ? ` (${data.guilds[gKey].karma})` : ''}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n              <FormHelperText>\r\n                <span>Documentation: </span>\r\n                <a\r\n                  className={classes.link}\r\n                  href={data.guilds[this.state.guild1].documentation}\r\n                  target=\"_blank\"\r\n                >\r\n                  {data.guilds[this.state.guild1].documentation}\r\n                </a>\r\n              </FormHelperText>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <FormHelperText>Guild 2</FormHelperText>\r\n            <FormControl className={classes.formControl}>\r\n              <Select\r\n                className={classes.select}\r\n                value={this.state.guild2}\r\n                onChange={this.toggleSelection}\r\n                inputProps={{\r\n                  name: 'guild2',\r\n                  id: 'guild2-select',\r\n                }}\r\n              >\r\n                {data.sortedguilds.map(gKey => (\r\n                  <MenuItem value={gKey}>\r\n                    {data.guilds[gKey].label}\r\n                    {data.guilds[gKey].karma ? ` (${data.guilds[gKey].karma})` : ''}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n              <FormHelperText>\r\n                <span>Documentation: </span>\r\n                <a\r\n                  className={classes.link}\r\n                  href={data.guilds[this.state.guild2].documentation}\r\n                  target=\"_blank\"\r\n                >\r\n                  {data.guilds[this.state.guild2].documentation}\r\n                </a>\r\n              </FormHelperText>\r\n            </FormControl>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container justify=\"center\" spacing={16} className={classes.container}>\r\n          <Grid item xs={12} lg={6}>\r\n            <SkillCompareTable\r\n              {...tableConfig}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} lg={6}>\r\n            <Grid container spacing={16} className={classes.container}>\r\n              <Grid item xs={12}>\r\n                <PerkCompareTable\r\n                  {...tableConfig}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <LanguageCompareTable\r\n                  {...tableConfig}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default withStyles(styles)(GuildCompare);\r\n","import React, { Component } from 'react'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport data from '../data/data.json';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst styles = (theme) => ({\r\n  sectionTitle: {\r\n    fontSize: 20,\r\n    padding: 6,\r\n  },\r\n  skillGroupTitle: {\r\n    fontSize: 18,\r\n    padding: 20,\r\n    textTransform: 'capitalize',\r\n  },\r\n  guildOptionText: {\r\n    padding: '0 20px',\r\n  },\r\n  guildOptionLink: {\r\n    textDecoration: 'none',\r\n  },\r\n  selectedCount: {\r\n    color: '#ffffff5e'\r\n  },\r\n  chipContainer: {\r\n    padding: '0 20px'\r\n  },\r\n  chip: {\r\n    margin: '0 4px 4px 0',\r\n  },\r\n  clearSelected: {\r\n    float: 'right',\r\n  }\r\n});\r\nclass SkillPicker extends Component {\r\n  state = {\r\n    selectedSkills: [],\r\n    guilds: [],\r\n    subguilds: [],\r\n  }\r\n\r\n  componentWillMount() {\r\n    for (let guildGroup of ['guilds', 'subguilds']) {\r\n      const guilds = data[guildGroup] ? Object.keys(data[guildGroup]) : [];\r\n      const result = [];\r\n      for (let guild of guilds) {\r\n        result.push({\r\n          key: guild,\r\n          label: data[guildGroup][guild].label,\r\n          skills: this.flattenGuild(guildGroup, guild),\r\n          karma: data[guildGroup][guild].karma,\r\n        });\r\n      }\r\n      this.setState({\r\n        [guildGroup]: result\r\n      })\r\n    }\r\n  }\r\n\r\n  flattenGuild = (guildGroup, guild) => {\r\n    let result = [];\r\n    for (let skillPrefix of ['', 'ex']) {\r\n      for (let profLevel of ['languages', ...data.proficiencies]) {\r\n        if (data[guildGroup][guild][`${skillPrefix}${profLevel}`]) {\r\n          result = [...data[guildGroup][guild][`${skillPrefix}${profLevel}`], ...result]\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  toggleSelection = (event, skill) => {\r\n    const {\r\n      selectedSkills\r\n    } = this.state;\r\n\r\n    const itemIndex = selectedSkills.indexOf(skill)\r\n    if (itemIndex === -1) {\r\n      this.setState({ selectedSkills: [skill, ...selectedSkills]})\r\n    } else {\r\n      selectedSkills.splice(itemIndex, 1);\r\n      this.setState({ selectedSkills: [...selectedSkills]})\r\n    }\r\n  }\r\n\r\n  clearSelection = () => {\r\n    this.setState({ selectedSkills: [] })\r\n  }\r\n\r\n  findGuildsForSkills = () => {\r\n    const result = [];\r\n    for (let guild of this.state.guilds) {\r\n      for (let subguild of this.state.subguilds) {\r\n        let skillsMatched = 0;\r\n        for (let skill of this.state.selectedSkills) {\r\n          if (guild.skills.includes(skill) || subguild.skills.includes(skill)) {\r\n            skillsMatched++;\r\n          }\r\n        }\r\n\r\n        if (skillsMatched === this.state.selectedSkills.length) {\r\n          const karmaLabel = (guild.karma || subguild.karma) ? ` (${guild.karma + subguild.karma})` : '';\r\n          result.push({\r\n            label: `${guild.label}/${subguild.label}${karmaLabel}`,\r\n            linkTo: `/arma-guild-picker/?guild=${guild.key}&subguild=${subguild.key}`\r\n          })\r\n        }\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  render () {\r\n    const {\r\n      classes,\r\n    } = this.props;\r\n    const {\r\n      selectedSkills,\r\n    } = this.state;\r\n    return (\r\n      <Grid container justify=\"center\" spacing={16} className={classes.container}>\r\n        <Grid item xs={12} sm={6}>\r\n          <Paper square>\r\n            <Grid container>\r\n              <Grid item xs={12} sm={6}>\r\n                <Typography className={classes.sectionTitle}>\r\n                  Skills\r\n                  {' '}\r\n                  <span className={classes.selectedCount}>({selectedSkills.length} selected)</span>\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                {selectedSkills.length > 0 && (<Button\r\n                  size=\"small\"\r\n                  className={classes.clearSelected}\r\n                  onClick={() => this.clearSelection()}\r\n                >\r\n                  Clear\r\n                </Button>)}\r\n              </Grid>\r\n              </Grid>\r\n            {['languages', ...data.skillGroups].map(skillGroup => (\r\n              <>\r\n                <Typography className={classes.skillGroupTitle}>{skillGroup}</Typography>\r\n                <div className={classes.chipContainer}>\r\n                  {Object.keys(data.skills[skillGroup]).map((key) => (\r\n                    <Chip\r\n                      className={classes.chip}\r\n                      onClick={(event) => this.toggleSelection(event, key)}\r\n                      label={data.skills[skillGroup][key].label}\r\n                      color={selectedSkills.includes(key) ? 'primary' : ''}\r\n                    />\r\n                  ))}\r\n                </div>\r\n              </>\r\n            ))}\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <Paper square>\r\n            <Typography className={classes.sectionTitle}>\r\n              Matching Guild\r\n              {' '}\r\n              <span className={classes.selectedCount}>(Click to View in Guild Picker)</span>\r\n            </Typography>\r\n            <Grid container justify=\"center\" spacing={16} className={classes.container}>\r\n              {this.findGuildsForSkills().map(guildCombination => (\r\n                <Grid item xs={12} sm={6} className={classes.guildOption}>\r\n                  <Link to={guildCombination.linkTo} className={classes.guildOptionLink}>\r\n                    <Typography className={classes.guildOptionText}>\r\n                      {guildCombination.label}\r\n                    </Typography>\r\n                  </Link>\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(SkillPicker);\r\n","const theme = {\r\n  \"palette\": {\r\n    \"type\": \"dark\",\r\n    \"primary\": {\r\n      \"main\": \"#d84315\",\r\n      \"contrastText\": \"rgba(0, 0, 0, 0.87)\"\r\n    },\r\n    \"secondary\": {\r\n      \"main\": \"#5d4037\"\r\n    },\r\n    \"primary1Color\": \"#d84315\",\r\n    \"primary2Color\": \"#5d4037\",\r\n    \"accent1Color\": \"#eeeeee\",\r\n    \"accent2Color\": \"rgba(255, 236, 179, 0.3)\",\r\n    \"accent3Color\": \"#ff8f00\"\r\n  },\r\n  \"tabs\": {\r\n    \"backgroundColor\": \"#e64a19\",\r\n    \"textColor\": \"rgba(33, 33, 33, 0.54)\"\r\n  },\r\n  \"tableRow\": {\r\n    \"selectedColor\": \"rgba(255, 255, 255, 0.1)\",\r\n    \"hoverColor\": \"rgba(255, 236, 179, 0.15)\"\r\n  },\r\n  \"toggle\": {\r\n    \"thumbOffColor\": \"rgba(255, 236, 179, 0.51)\",\r\n    \"labelDisabledColor\": \"rgba(255, 255, 255, 0.29)\",\r\n    \"thumbDisabledColor\": \"rgba(255, 255, 255, 0.48)\"\r\n  }\r\n};\r\nexport default theme;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport './App.css';\r\nimport Layout from './components/Layout'\r\nimport GuildPicker from './components/GuildPicker'\r\nimport GuildCompare from './components/GuildCompare'\r\nimport SkillPicker from './components/SkillPicker'\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport themeOverrides from './theme.js';\r\nconst theme = createMuiTheme(themeOverrides);\r\n\r\nfunction App() {\r\n  return (\r\n    <MuiThemeProvider theme={theme}>\r\n      <Router>\r\n        <Layout>\r\n          <Route path=\"/arma-guild-picker/\" exact component={GuildPicker} />\r\n          <Route path=\"/arma-guild-picker/guild-picker/\" component={GuildPicker} />\r\n          <Route path=\"/arma-guild-picker/guild-compare/\" component={GuildCompare} />\r\n          <Route path=\"/arma-guild-picker/skill-picker/\" component={SkillPicker} />\r\n        </Layout>\r\n      </Router>\r\n    </MuiThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}