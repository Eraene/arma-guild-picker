{"version":3,"sources":["components/NavBar.jsx","components/Layout.jsx","components/Index.jsx","components/GuildPicker.jsx","components/GuildCompare.jsx","components/SkillPicker.jsx","theme.js","App.jsx","serviceWorker.js","index.js"],"names":["withRouter","withStyles","theme","appBar","Object","objectSpread","appTitle","paddingRight","link","textDecoration","color","opacity","&>button","fontWeight","margin","padding","activeLink","_ref","classes","react_default","a","createElement","Fragment","AppBar_default","position","Toolbar_default","className","Typography_default","variant","react_router_dom","to","activeClassName","exact","Button_default","withTheme","children","styles","layout","height","backgroundColor","palette","background","default","style","components_NavBar","GuildPicker","state","guild","subguild","toggleSelection","event","_this","setState","defineProperty","target","name","value","skillKey","_i","_Object$keys","keys","data","skills","length","group","foundSkill","find","k","label","_this2","this","_this$state","result","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","proficiency","_loop2","guildGroup","_arr","_i2","guildKey","forEach","sk","_objectSpread2","_this2$findGroupAndLa","findGroupAndLabel","concat","_iterator","proficiencies","Symbol","iterator","next","done","err","return","values","props","_this$state2","Paper_default","root","Table_default","table","TableHead_default","TableRow_default","TableCell_default","FormControl_default","formControl","Select_default","onChange","inputProps","id","guilds","map","MenuItem_default","subguilds","subguildKey","TableBody_default","mungeSkills","row","key","component","scope","guildsSkill","guildsSkillLevel","subguildsSkill","subguildsSkillLevel","Component","type","primary","main","contrastText","secondary","primary1Color","primary2Color","accent1Color","accent2Color","accent3Color","tabs","textColor","tableRow","selectedColor","hoverColor","toggle","thumbOffColor","labelDisabledColor","thumbDisabledColor","createMuiTheme","themeOverrides","App","core_styles","components_Layout","react_router","path","GuildCompare","SkillPicker","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5d2d0dcf.chunk.js","sourcesContent":["import React from 'react'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Button from '@material-ui/core/Button';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { withRouter } from \"react-router\";\r\n\r\nconst styles = (theme) => ({\r\n  appBar: {\r\n    ...theme.appBar\r\n  },\r\n  appTitle: {\r\n    paddingRight: 32\r\n  },\r\n  link: {\r\n    textDecoration: 'none',\r\n    color: 'inherit',\r\n    opacity: 0.69,\r\n    '&>button': {\r\n      fontWeight: 600,\r\n      margin: '0 4px',\r\n      padding: '4px'\r\n    }\r\n  },\r\n  activeLink: {\r\n    opacity: 1,\r\n  },\r\n});\r\n\r\nconst NavBar = ({\r\n  classes,\r\n}) => {\r\n  return(\r\n    <>\r\n      <AppBar position=\"static\">\r\n        <Toolbar className={classes.appBar}>\r\n          <Typography className={classes.appTitle} variant=\"title\" color=\"inherit\">\r\n            Armageddon MUD Skills & Guilds\r\n          </Typography>\r\n          <NavLink to=\"/arma-guild-picker/\" className={classes.link} activeClassName={classes.activeLink} exact>\r\n            <Button color=\"inherit\">\r\n              Guild Picker\r\n            </Button>\r\n          </NavLink>\r\n          <NavLink to=\"/arma-guild-picker/guild-compare/\" className={classes.link} activeClassName={classes.activeLink} exact>\r\n            <Button color=\"inherit\">\r\n              Guild Compare\r\n            </Button>\r\n          </NavLink>\r\n          <NavLink to=\"/arma-guild-picker/skill-picker/\" className={classes.link} activeClassName={classes.activeLink} exact>\r\n            <Button color=\"inherit\">\r\n              Skill Picker\r\n            </Button>\r\n          </NavLink>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </>\r\n  )\r\n}\r\nexport default withRouter(withStyles(styles)(NavBar));\r\n","import React from 'react'\r\nimport { withTheme } from '@material-ui/core/styles';\r\nimport NavBar from './NavBar'\r\n\r\nconst Layout = ({\r\n  theme,\r\n  children\r\n}) => {\r\n  const styles = {\r\n    layout: {\r\n      height: '100vh',\r\n      backgroundColor: theme.palette.background.default,\r\n    }\r\n  }\r\n  return(\r\n    <div style={styles.layout}>\r\n      <NavBar />\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\nexport default withTheme()(Layout);\r\n","import React from 'react'\r\nimport { withTheme } from '@material-ui/core/styles';\r\n\r\nconst Index = () => 'Index'\r\nexport default withTheme()(Index);\r\n","import React, { Component }from 'react'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport data from '../data/data.json'\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Input from '@material-ui/core/Input';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport FilledInput from '@material-ui/core/FilledInput';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nconst styles = (theme) => ({});\r\nclass GuildPicker extends Component {\r\n  state = {\r\n    guild: 'enforcer',\r\n    subguild: 'hunter',\r\n  }\r\n\r\n  toggleSelection = event => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  }\r\n\r\n  findGroupAndLabel(skillKey) {\r\n    for (let group of Object.keys(data.skills)) {\r\n      const foundSkill = Object.keys(data.skills[group]).find((k) => k === skillKey)\r\n      if (foundSkill) {\r\n        return {\r\n          group,\r\n          label: data.skills[group][foundSkill],\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  mungeSkills() {\r\n    const {\r\n      guild,\r\n      subguild,\r\n    } = this.state;\r\n    const result = {};\r\n    for (let proficiency of data.proficiencies) {\r\n      for (let guildGroup of ['guilds', 'subguilds']) {\r\n        const guildKey = guildGroup == 'guilds' ? guild : subguild;\r\n        if (data[guildGroup] && data[guildGroup][guildKey][proficiency]) {\r\n          data[guildGroup][guildKey][proficiency].forEach(sk => {\r\n            const {\r\n              group,\r\n              label,\r\n            } = this.findGroupAndLabel(sk);\r\n            result[sk] = {\r\n              [`${guildGroup}Skill`]: label,\r\n              [`${guildGroup}SkillLevel`]: proficiency,\r\n              group,\r\n              ...result[sk],\r\n            }\r\n          })\r\n        }\r\n      }\r\n    }\r\n    return Object.values(result);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      classes\r\n    } = this.props;\r\n    const {\r\n      guild,\r\n      subguild,\r\n    } = this.state;\r\n    return (\r\n      <Paper className={classes.root}>\r\n        <Table className={classes.table}>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>\r\n                <FormControl className={classes.formControl}>\r\n                  <Select\r\n                    value={this.state.guild}\r\n                    onChange={this.toggleSelection}\r\n                    inputProps={{\r\n                      name: 'guild',\r\n                      id: 'guild-select',\r\n                    }}\r\n                  >\r\n                    {Object.keys(data.guilds).map(guildKey => (\r\n                      <MenuItem value={guildKey}>{data.guilds[guildKey].label}</MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </TableCell>\r\n              <TableCell/>\r\n              <TableCell>\r\n                <FormControl className={classes.formControl}>\r\n                  <Select\r\n                    value={this.state.subguild}\r\n                    onChange={this.toggleSelection}\r\n                    inputProps={{\r\n                      name: 'subguild',\r\n                      id: 'subguild-select',\r\n                    }}\r\n                  >\r\n                    {Object.keys(data.subguilds).map(subguildKey => (\r\n                      <MenuItem value={subguildKey}>{data.subguilds[subguildKey].label}</MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </FormControl>\r\n              </TableCell>\r\n              <TableCell/>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {this.mungeSkills().map(row => (\r\n              <TableRow key={row.id}>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {row.guildsSkill}\r\n                </TableCell>\r\n                <TableCell>{row.guildsSkillLevel}</TableCell>\r\n                <TableCell>{row.subguildsSkill}</TableCell>\r\n                <TableCell>{row.subguildsSkillLevel}</TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </Paper>\r\n    );\r\n  }\r\n}\r\nexport default withStyles(styles)(GuildPicker);\r\n","import React from 'react'\r\nimport { withTheme } from '@material-ui/core/styles';\r\n\r\nconst GuildCompare = () => 'Guild Compare'\r\nexport default withTheme()(GuildCompare);\r\n","import React from 'react'\r\nimport { withTheme } from '@material-ui/core/styles';\r\n\r\nconst SkillPicker = () => 'Skill Picker'\r\nexport default withTheme()(SkillPicker);\r\n","const theme = {\r\n  \"palette\": {\r\n    \"type\": \"dark\",\r\n    \"primary\": {\r\n      \"main\": \"#d84315\",\r\n      \"contrastText\": \"rgba(0, 0, 0, 0.87)\"\r\n    },\r\n    \"secondary\": {\r\n      \"main\": \"#5d4037\"\r\n    },\r\n    \"primary1Color\": \"#d84315\",\r\n    \"primary2Color\": \"#5d4037\",\r\n    \"accent1Color\": \"#eeeeee\",\r\n    \"accent2Color\": \"rgba(255, 236, 179, 0.3)\",\r\n    \"accent3Color\": \"#ff8f00\"\r\n  },\r\n  \"tabs\": {\r\n    \"backgroundColor\": \"#e64a19\",\r\n    \"textColor\": \"rgba(33, 33, 33, 0.54)\"\r\n  },\r\n  \"tableRow\": {\r\n    \"selectedColor\": \"rgba(255, 255, 255, 0.1)\",\r\n    \"hoverColor\": \"rgba(255, 236, 179, 0.15)\"\r\n  },\r\n  \"toggle\": {\r\n    \"thumbOffColor\": \"rgba(255, 236, 179, 0.51)\",\r\n    \"labelDisabledColor\": \"rgba(255, 255, 255, 0.29)\",\r\n    \"thumbDisabledColor\": \"rgba(255, 255, 255, 0.48)\"\r\n  }\r\n};\r\nexport default theme;\r\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport './App.css';\nimport Layout from './components/Layout'\nimport Index from './components/Index'\nimport GuildPicker from './components/GuildPicker'\nimport GuildCompare from './components/GuildCompare'\nimport SkillPicker from './components/SkillPicker'\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport themeOverrides from './theme.js';\nconst theme = createMuiTheme(themeOverrides);\n\nfunction App() {\n  return (\n    <MuiThemeProvider theme={theme}>\n      <Router>\n        <Layout>\n          <Route path=\"/arma-guild-picker/\" exact component={GuildPicker} />\n          <Route path=\"/arma-guild-picker/guild-picker/\" component={GuildPicker} />\n          <Route path=\"/arma-guild-picker/guild-compare/\" component={GuildCompare} />\n          <Route path=\"/arma-guild-picker/skill-picker/\" component={SkillPicker} />\n        </Layout>\n      </Router>\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}